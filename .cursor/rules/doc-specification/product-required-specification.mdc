---
description: 生成产品需求文档时
globs: 
alwaysApply: false
---
# Life Toolkit AI友好型产品需求文档(PRD)规范

## 📋 适用场景
当需要编写面向AI的产品需求文档(PRD)时，遵循此规范确保需求描述结构化、可解析、面向业务。AI友好型PRD专注于提供明确的业务需求、用户场景和产品功能定义，为后续的技术开发提供清晰的产品指导。

## 🎯 PRD核心职责
- **产品定义**: 明确产品功能目标和业务价值
- **需求分析**: 详细的用户故事和业务场景
- **功能设计**: 产品功能流程和交互规范
- **验收标准**: 明确的功能验收条件

## 🤖 AI友好型设计原则

### 核心原则
1. **业务导向**: 专注于业务需求和用户价值
2. **结构化描述**: 使用标准化的需求描述格式
3. **明确边界**: 清晰定义功能范围和约束条件
4. **可验证性**: 提供明确的验收标准和测试场景
5. **标准化术语**: 使用一致的业务术语和产品词汇

## 🏗️ 核心文档结构

### 一、产品概述 (必填)
```yaml
# 使用YAML格式提供结构化元数据
product_meta:
  name: "功能名称"
  version: "v1.0"
  priority: "high|medium|low"
  complexity: "simple|medium|complex"
  estimated_effort: "1-3天|1-2周|2-4周"
  business_value: "解决的核心业务问题"
  target_users: ["用户群体1", "用户群体2"]
  related_features: ["相关功能1", "相关功能2"]
  tags: ["标签1", "标签2"]
```

1. **功能目标**: 使用"解决[问题] + 提供[价值] + 面向[用户]"的标准格式
2. **用户场景**: 使用结构化的场景描述模板
3. **功能范围**: 明确的包含/排除清单

### 二、需求分析 (必填)
4. **用户故事**: 使用标准化的用户故事格式 + 验收条件
```gherkin
# 使用Gherkin语法格式
Feature: 功能名称
  As a [角色]
  I want [功能]
  So that [价值]

Scenario: 场景名称
  Given [前置条件]
  When [操作步骤]
  Then [预期结果]
  And [额外验证]
```

5. **功能流程**: 使用流程图 + 决策树格式
6. **业务规则**: 使用自然语言描述的业务逻辑

### 三、产品设计 (必填)
7. **功能详述**: 使用标准化的功能描述模板
```markdown
### 功能名称
**业务目标**: 
- 解决什么业务问题
- 为用户提供什么价值

**功能描述**: 
- 主要功能点1: 详细描述
- 主要功能点2: 详细描述
- 主要功能点3: 详细描述

**用户操作流程**: 
1. 用户进入功能页面
2. 执行核心操作
3. 查看操作结果
4. 完成业务目标

**业务规则**: 
- 权限规则: 谁可以使用此功能
- 数据规则: 数据的业务约束
- 流程规则: 业务流程的限制条件

**异常处理**: 
- 常见异常: 描述 + 用户提示
- 边界情况: 描述 + 处理方式
```

8. **界面设计**: 功能布局 + 交互规范 (不涉及具体技术实现)
9. **权限控制**: 基于角色的功能访问规则

### 四、验收标准 (必填)
10. **功能验收**: 使用BDD格式的测试用例
```gherkin
Scenario Outline: 测试场景模板
  Given 用户角色是 "<role>"
  And 业务状态是 "<state>"
  When 用户执行 "<action>" 操作
  And 输入内容是 "<input>"
  Then 系统应该显示 "<output>"
  And 业务状态变更为 "<new_state>"

Examples:
  | role | state | action | input | output | new_state |
  | 用户 | 初始  | 创建   | 数据  | 成功   | 已创建    |
```

11. **业务验收**: 业务目标达成标准
12. **用户体验**: 可用性和易用性要求

## 📝 AI友好型编写规范

### 格式要求
- **结构化数据**: 优先使用YAML、Gherkin等标准格式
- **标准化模板**: 使用一致的描述模板
- **业务语言**: 使用业务术语，避免技术实现细节
- **场景驱动**: 以用户场景为核心组织内容

### 内容要求
- **明确边界**: 清晰定义功能的包含和排除范围
- **完整场景**: 提供真实的用户使用场景
- **业务规则**: 明确定义所有业务约束和规则
- **验收标准**: 清晰的功能验收和业务验收条件

## 🔧 AI友好型示例模板

```markdown
# 待办事项管理功能 PRD

## 一、产品概述
```yaml
product_meta:
  name: "待办事项管理"
  version: "v1.0"
  priority: "high"
  complexity: "medium"
  estimated_effort: "1-2周"
  business_value: "提高个人任务管理效率，减少遗忘和拖延"
  target_users: ["个人用户", "知识工作者"]
  related_features: ["目标管理", "习惯追踪"]
  tags: ["个人成长", "任务管理", "效率工具"]
```

**功能目标**: 解决用户任务记录和追踪混乱问题 + 提供高效的任务管理体验 + 面向个人效率提升用户

**用户场景**: 
- 主场景: 个人用户日常任务规划和执行追踪
- 次场景: 工作任务管理和进度监控
- 边界场景: 团队协作(排除)、复杂项目管理(排除)

**功能范围**: 
✅ 包含: 任务创建、编辑、删除、状态管理、优先级设置、截止时间
❌ 排除: 团队协作、文件附件、评论功能、子任务分解

## 二、需求分析
```gherkin
Feature: 待办事项管理
  As a 个人用户
  I want 创建和管理待办事项
  So that 我可以有效规划和追踪任务进度

Scenario: 创建待办事项
  Given 用户已登录系统
  And 用户在待办事项页面
  When 用户点击"新建待办"按钮
  And 填写标题"完成项目报告"
  And 设置优先级为"高"
  And 设置截止时间为"2024-01-15"
  And 点击保存按钮
  Then 系统应该创建新的待办事项
  And 显示成功提示信息
  And 待办事项出现在列表中

Scenario: 标记完成
  Given 用户有一个未完成的待办事项
  When 用户点击完成按钮
  Then 待办事项状态变更为已完成
  And 显示完成时间
  And 从未完成列表移动到已完成列表
```

**业务流程**:
```
用户登录 → 查看待办列表 → 创建新待办 → 设置属性 → 保存 → 执行任务 → 标记完成 → 查看统计
```

**业务规则**:
- 权限规则: 用户只能管理自己的待办事项
- 数据规则: 标题必填，描述可选，截止时间可选
- 状态规则: 待办 → 完成/取消，完成/取消 → 待办(可重新激活)

## 三、产品设计

### 创建待办事项
**业务目标**: 
- 解决任务记录不及时的问题
- 为用户提供快速任务录入能力

**功能描述**: 
- 快速创建: 支持标题快速创建，其他属性可选
- 属性设置: 优先级、截止时间、详细描述
- 智能提示: 根据历史数据提供输入建议

**用户操作流程**: 
1. 用户点击"新建待办"按钮
2. 填写任务标题(必填)
3. 选择性设置优先级、截止时间、描述
4. 点击保存完成创建
5. 系统显示创建成功，返回列表页

**业务规则**: 
- 权限规则: 登录用户可创建待办事项
- 数据规则: 标题1-100字符，描述最多500字符
- 流程规则: 创建后默认状态为"待办"

**异常处理**: 
- 标题为空: 提示"请输入任务标题"
- 网络异常: 提示"保存失败，请重试"
- 字符超限: 提示"标题不能超过100字符"

### 界面设计
**功能布局**:
- 顶部: 新建按钮 + 筛选器(状态、优先级)
- 主体: 待办事项列表(卡片式布局)
- 底部: 分页器(如需要)

**交互规范**:
- 点击新建 → 打开创建弹窗
- 点击编辑 → 打开编辑弹窗，预填数据
- 点击完成 → 直接更新状态，显示确认动画
- 长按/右键 → 显示操作菜单(编辑、删除、完成)

**权限控制**:
- 查看权限: 用户只能查看自己的待办事项
- 操作权限: 用户只能操作自己的待办事项
- 管理权限: 管理员可查看所有用户数据(仅统计)

## 四、验收标准
```gherkin
Scenario Outline: 待办事项功能验收
  Given 用户角色是 "<role>"
  And 系统中有 "<existing_count>" 个待办事项
  When 用户执行 "<action>" 操作
  And 输入数据是 "<input_data>"
  Then 系统应该显示 "<expected_result>"
  And 业务状态变更为 "<final_state>"

Examples:
  | role | existing_count | action | input_data | expected_result | final_state |
  | 用户 | 0 | 创建 | 标题:"测试任务" | 创建成功提示 | 有1个待办事项 |
  | 用户 | 1 | 完成 | 点击完成按钮 | 状态更新为已完成 | 有1个已完成事项 |
  | 用户 | 1 | 删除 | 点击删除按钮 | 删除确认提示 | 待办事项被删除 |
  | 游客 | 0 | 创建 | 标题:"测试任务" | 登录提示 | 跳转到登录页 |
```

**业务验收**: 
- 任务管理效率: 用户创建任务时间 < 30秒
- 功能完整性: 支持完整的CRUD操作
- 数据准确性: 状态变更准确，时间记录正确
- 用户体验: 操作流畅，反馈及时

**用户体验**: 
- 易用性: 新用户5分钟内学会使用
- 响应性: 页面操作响应时间 < 1秒
- 一致性: 交互方式与系统其他功能保持一致
- 可访问性: 支持键盘操作，色彩对比度符合标准

## 🎯 AI友好型与传统PRD的区别

### AI友好型PRD特点
- **业务聚焦**: 专注于业务需求，不涉及技术实现
- **结构化描述**: 使用标准格式，便于AI理解和解析
- **场景驱动**: 以用户场景为核心组织内容
- **验收明确**: 提供清晰的验收标准和测试场景
- **边界清晰**: 明确功能范围，避免需求蔓延

### 与开发文档的边界
- **PRD负责**: 产品定义、业务需求、用户场景、验收标准
- **开发文档负责**: 技术架构、数据模型、API设计、代码生成
- **协作方式**: PRD为开发文档提供业务输入，开发文档实现PRD需求